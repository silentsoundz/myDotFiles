{"name":"in-app-purchase","description":"In-App-Purchase validation and subscription management for iOS, Android, Amazon, and Windows","version":"1.2.0","author":{"name":"Nobuyori Takahashi","email":"voltrue2@yahoo.com"},"repository":{"type":"git","url":"git+https://github.com/voltrue2/in-app-purchase.git"},"dependencies":{"xmldom":"0.1.19","xml-crypto":"0.8.2","request":"2.75.0"},"devDependencies":{"mocha":"1.18.2"},"scripts":{"test":"./precommit.sh"},"engine":"node >= 0.10.20","contributors":[],"keywords":["Apple","iOS","Android","Windows","Amazon","Purchase","Subscription","App","in-app-purchase","in-app-billing","Validation","IAP"],"jshintConfig":{"node":true,"bitwise":false,"camelcase":true,"curly":true,"eqeqeq":true,"forin":false,"immed":true,"latedef":false,"newcap":true,"noarg":true,"noempty":true,"undef":true,"unused":true,"nonew":true,"white":true,"maxdepth":5,"quotmark":"single","globals":{"mocha":false,"describe":false,"it":false,"before":false,"beforeEach":false,"after":false,"afterEach":false}},"license":"MIT","readme":"# in-app-purchase\n\nÂ©Nobuyori Takahashi < <voltrue2@yahoo.com> >\n\n[![Build Status](https://travis-ci.org/voltrue2/in-app-purchase.svg?branch=master)](https://travis-ci.org/voltrue2/in-app-purchase)\n\nA Node.js module for In-App-Purchase validation for iOS, Android, Amazon, and Windows.\n\nIt can also validate multiple app's receipt with a single back-end using `.validateOnce()` that allows you to change `secret` or `public key` dynamically.\n\n### Required node.js Version\n\n`0.12.0 >=`\n\n### Online Demo and Doc\n\n<a href=\"http://iap.gracenode.org\" target=\"_blank\">Online Demo</a>\n\n### Debug Logging\n\nThe module can optionally turn on verbose debug log.\n\nIn order to enable the verbose logging, give the following to `.config()` **BEFORE** calling `.setup([callback])`:\n\n```javascript\nvar iap = require('in-app-purchase');\niap.config({\n\tverbose: true\n});\n```\n\n### Methods\n\n#### .validate(service [constant], receipt [string or object], callback [function])\n\nValidates an in-app-purchase receipt.\n\n**NOTE 1:**\n\nconstant for iOS: `iap.APPLE`\n\nconstant for Android: `iap.GOOGLE`\n\nconstant for Windows: `iap.WINDOWS`\n\nconstant for Amazon: `iap.AMAZON`\n\n- For Apple validation, receipt is a base64 encoded string.\n\n- For Google validation, receipt is an object `{ data: \"stringified purchase data\", signature: \"yyyy\" }`.\n\n- For Windows validation, receipt is a signed XML string.\n\n- For Amazon validation, receipt is an object `{ userId: \"xxx\", receiptId: \"yyyy\" }`. `receiptId` is a ``purchaseToken sent from Amazon app store server.\n\n**NOTE 2:**\n\nValidation error will have a response object as `{ status: <status code>, message: <message string> }`.\n\n**NOTE 3:**\n\nFor Google Play validation, the `data` must be a string, but if you pass it as an object, the module can automatically correct the data format and validate it still.\n\n**NOTE 4:**\n\nFor Apple purchase, if `in_app` in the validated receipt is empty, the module considers invalid since the receipt indicates that the user purchased nothing:\n\nRelated reads:\n\n<a href=\"https://forums.developer.apple.com/thread/8954\">Apple Developer Thread 8954</a>\n\n<a href=\"https://developer.apple.com/library/mac/technotes/tn2413/_index.html#//apple_ref/doc/uid/DTS40016228-CH1-RECEIPT-HOW_DO_I_USE_THE_CANCELLATION_DATE_FIELD_\">Apple Purchase</a>\n\n#### .validateOnce(service [constant], secretOrPubKey [string], receipt [string or object], callback [function]);\n\nValidates an in-app-purchase receipt with a dynamically fed secret or public key. \n\nThis is usefuly when you need to validate multiple apps' receipts with a single back-end.\n\n#### .isValidated(response [object])\n\nReturns a boolean.\n\n#### .getPurchaseData(response [object], options [*object]);\n\nReturns a parsed purchase data as an array.\n\nFor apple and windows, the returned array may contain more than 1 purchase data.\n\nFor Windows purchase data and Apple iTunes (recurring subscription only), each purchase data in the array contains `expirationDate`.\n\nFor Google Play purchases (recurring subscription only), each purchase data in the array contains `expirationDate` only if you provide google play store information.\n\n#### .refreshGoogleToken(callback [function]);\n\nFor Android only!\n\nReturns a callback function with `error` and `response` as arguments.\n\nThis method should be used when trying to query the Google Play Store API, but the access token is no longer valid.\n\n\n##### Options\n\n```\n{\n    ignoreExpired: <boolean>\n}\n```\n\n**ignoreExpired**: If `true`, the function will exclude expired items from the return array.\n\nThis is only for `windows` and `apple` iTunes (recurring subscription only).\n\n**NOTE:** For Apple, if the item is NOT a recurring purchase, then `expirationDate` is `0`.\n\nThe purchase data structure is:\n\n```\n{\n    bundleId: <string>, // Apple only\n    orderId: <string>, // Google only\n    transactionId: <string>,\n    productId: <string>,\n    purchaseDate: <number>,\n    quantity: <number>,\n    *expirationDate: <number> // iTunes, windows and amazon subscription only. Google subscriptions only with google play store api info\n}\n```\n\nExample:\n\n```javascript\niap.setup(function (error) {\n    if (error) {\n        // error hmm\n    }\n    iap.validate(iap.APPLE, receipt, function (error, response) {\n        if (error) {\n            // error\n        }\n        if (iap.isValidated(response)) {\n            var purchaseDataList = iap.getPurchaseData(response);\n            /*\n                [\n                    {\n                        productId: xxx,\n                        purchasedDate: yyy,\n                        quantity: zzz\n                    }\n                ]\n            */\n        }\n    });\n});\n```\n\n#### .isExpired(purchaseDataItem [object])\n\nReturns `true` if a purchased item has been expired.\n\n**NOTE:** This function is for `windows` and `apple` iTunes (recurring subscription only). This can also be used for `google` subscriptions since you provide google play store api information.\n\n\nExample For Checking Expiration Manually:\n\n```javascript\niap.setup(function (error) {\n    if (error) {\n        // handle error properly here\n    }\n    iap.validate(iap.APPLE, receipt, function (error, response) {\n        if (error) {\n            // oh no error...\n        }\n        if (iap.isValidated(response)) {\n            // now check if any of the items validated has been expired or not\n            var purchaseDataList = iap.getPurchaseData(response);\n            for (var i = 0, len = purchaseDataList.length; i < len; i++) {\n                if (iap.isExpired(purchaseDataList[i])) {\n                    // this item has been expired...\n                }\n            }\n        }\n    });\n});\n```\n\nExample For Ignoring Expired Items:\n\n```javascript\niap.setup(function (error) {\n    if (error) {\n        // handle error properly here\n    }\n    iap.validate(iap.APPLE, receipt, function (error, response) {\n        if (error) {\n            // oh no error...\n        }\n        if (iap.isValidated(response)) {\n            // get the purchased items that have not been expired ONLY\n            var options = {\n                ignoreExpired: true\n            };\n            var purchaseDataList = iap.getPurchaseData(response, options);\n        }\n    });\n});\n```\n\n### Apple Recurring Purchase Password\n\nFor iTunes subscription purchases, a shared password is required.\n\n### GooglePlay Public Key From Files\n\nFor GooglePlay, `in-app-purchase` module needs to have the public key file(s).\n\nThe module requires the file(s) to be name in a certain way:\n\nFor sandbox, the file name should be: `iap-sandbox`.\n\nFor production, the file name should be: `iap-live`.\n\n### Public Key File(s)\n\nGoogle Play has only one public key for both production and sandbox, but the module gives you an option to separate the public keys for development and testing.\n\nIf you do not need to have different public keys, simply use the same public key in both files.\n\n### Configurations\n\nThe module needs to call `.config()` before it can execute `.setup()` correctly.\n\nExample:\n\n```\nvar inAppPurchase = require('in-app-purchase');\ninAppPurchase.config({\n    secret: \"abcdefghijklmnoporstuvwxyz\", // this comes from Amazon\n    applePassword: \"1234567890abcdef1234567890abcdef\", // this comes from iTunes Connect\n    googlePublicKeyPath: \"path/to/public/key/directory/\" // this is the path to the directory containing iap-sanbox/iap-live files\n});\n```\n\n#### HTTP Request Configuration\n\nThe module utilises the Request module for the HTTP requests required to validate Apple and Windows IAP subscriptions. The default settings for requests can be configured by passing in the `requestDefaults` configuration property. This allows you to configure proxies, tunnels and request timeouts. This object can contain any [Request module options](https://github.com/request/request#requestoptions-callback) but may be overridden by request-specific options set by this module.\n\nExample:\n\n```javascript\n// set timeout to be 5 seconds\niap.config({\n    requestDefaults: {\n        timeout: 5000\n    }\n});\n```\n\n### GooglePlay Public Key From Environment Variables\n\nFor GooglePlay, `in-app-purchase` module can read public key value from the environment variables instead of file(s).\n\nThe basics is the same as using file(s).\n\nYou will need to set the public key value, which is the same value as you would save as a file, to environment variables.\n\n#### GOOGLE_IAB_PUBLICKEY_SANDBOX\n\nThis would be the public key value for sandbox.\n\n`export=GOOGLE_IAB_PUBLICKEY_SANDBOX=xxxxxxxxxxxxxxxxxxxxxxxx`.\n\n#### GOOGLE_IAB_PUBLICKEY_LIVE\n\nThis would be the public key value for live\n\n`export=GOOGLE_IAB_PUBLICKEY_LIVE=yyyyyyyyyyyyyyyyyyyyyyyyyy`.\n\n**NOTE**: This works exactly the same as you were to use file(s) with one expection. You do **NOT** need to call `.config()` for GooglePlay since it will be using environment variables instead.\n\n### GooglePlay Public Key As String\n\nThe module also allows you to feed GooglePlay public key value as string. For example, you may store the key value in a database and read from it to use it etc.\n\nExample:\n\n```\nvar iap = require('in-app-purchase');\niap.config({\n    googlePublicKeyStrSandbox: publicKeySandboxString,\n    googlePublicKeyStrLive: publicKeyLiveString\n});\n//... proceed with the rest of your code here\n```\n\n### How To Use It\n\nExample: Apple\n\n```javascript\nvar iap = require('in-app-purchase');\niap.config({\n    applePassword: \"1234567890abcdef1234567890abcdef\"\n});\niap.setup(function (error) {\n    if (error) {\n        return console.error('something went wrong...');\n    }\n    // iap is ready\n    iap.validate(iap.APPLE, appleReceipt, function (err, appleRes) {\n        if (err) {\n            return console.error(err);\n        }\n        if (iap.isValidated(appRes)) {\n            // yay good!\n        }\n    });\n});\n```\n\nExample: Google\n\n```javascript\nvar iap = require('in-app-purchase');\n/*\nFor google iap, you need to name your public key file as:\niap-sanbox or iap-live\n*/\niap.config({\n    googlePublicKeyPath: \"/path/to/google/public/key/dir/\"\n});\niap.setup(function (error) {\n    if (error) {\n        return console.error('something went wrong...');\n    }\n    /*\n        google receipt must be provided as an object\n        {\n            \"data\": \"{stringified data object}\",\n            \"signature\": \"signature from google\"\n        }\n    */\n    // iap is ready\n    iap.validate(iap.GOOGLE, googleReceipt, function (err, googleRes) {\n        if (err) {\n            return console.error(err);\n        }\n        if (iap.isValidated(googleRes)) {\n            // yay good!\n        }\n    });\n});\n```\n\nExample: Amazon\n\n```javascript\niap.config({\n\tsecret: 'shared secret from Amazon'\n});\niap.setup(function (error) {\n    if (error) {\n        // oh no...\n    }\n    iap.validate(iap.AMAZON, amazonReceipt, function (err, response) {\n        if (err) {\n            return console.error(err);\n        }\n        if (iap.isValidated(response)) {\n            // goody validated\n        }\n    });\n});\n```\n\nExample: Windows\n\n```javascript\nvar iap = require('in-app-purchase');\niap.setup(function (error) {\n    if (erorr) {\n        // oops\n    }\n    iap.validate(iap.WINDOWS, windowsReceipt, function (err, windowsRes) {\n        if (err) {\n            // failed to validate the purchase\n        }\n        if (iap.isValidated(windowsRes)) {\n            // yay good!\n        }\n    });\n});\n```\n## Google Play Store API\n\nYou can use Google Play Store API to check the state of a subscription (if the subscription is still valid, auto-renewal, etc). To do so, you need to setup iap module with Google Play Store API Information.\n\nExample:\n\n```javascript\niap.config({\n        googlePublicKeyPath: \"/path/to/google/public/key/dir/\",\n        googleAccToken: \"PLAY_STORE_API_ACCESS_TOKEN\",\n        googleRefToken: \"PLAY_STORE_API_REFRESH_TOKEN\",\n        googleClientID: \"PLAY_STORE_API_CLIENT_ID\",\n        googleClientSecret: \"PLAY_STORE_API_CLIENT_SECRET\"\n});\n\niap.setup(function (error) {\n    if (error) {\n        // error hmm\n    }\n    iap.validate(iap.GOOGLE, receipt, function (error, response) {\n        if (error) {\n            // error\n        }\n        if (iap.isValidated(response)) {\n            var purchaseDataList = iap.getPurchaseData(response);\n            /*\n                [\n                    {\n                        productId: xxx,\n                        purchasedDate: yyy,\n                        quantity: zzz\n                    }\n                ]\n            */\n        }\n    });\n});\n```\n**NOTE:** If one of the keys (`googleAccToken`, `googleRefToken`, `googleClientID` or `googleClientSecret`) is missing in the `config()` function, iap module will only perform the validation of the receipt, and won't do any check using Google Play Store API.\n\n## Google In-app-Billing Set Up\n\nTo set up your server-side Android in-app-billing correctly, you must provide the public key string as a file from your Developer Console account.\n\n**Reference:** <a href=\"https://developer.android.com/google/play/billing/billing_integrate.html#billing-security\">Implementing In-app Billing</a>\n\nOnce you copy the public key string from the Developer Console account for your application, you simply need to copy and paste it to a file and name it `iap-live` as shown in the example above.\n\n**NOTE:** The public key string you copy from the Developer Console account is actually a base64 string. You do NOT have to convert this to anything yourself. The module converts it to the public key automatically for you.\n\n### Google Play Store API\n\nTo check expiration date or auto renewal status of an Android subscription, you should first setup the access to the Google Play Store API. You should follow these steps:\n\n##### Part 1 - Get ClientID and ClientSecret\n1. Go to https://play.google.com/apps/publish/\n2. Click on `Settings`\n3. Click on `API Access`\n4. There should be a linked project already, if not, create one. If you have it, click it.\n* You should now be at: https://console.developers.google.com/apis/library?project=xxxx\n5. Under Mobile API's, make sure \"Google Play Developer API is enabled\".\n6. Go back, on the left click on `Credentials`\n7. Click `Create Credentials` button\n8. Choose `OAuth Client ID`\n9. Choose `Web Application`\n * Give it a name, skip the `Authorized JS origins`\n * Aadd this to `Authorized Redirect URIs`: https://developers.google.com/oauthplayground\n * Hit Save and copy the **clientID** and **clientSecret** somewhere safe.\n\n##### Part 2 - Get Access and Refresh Tokens\n1. Go to: https://developers.google.com/oauthplayground\n2. On the right, hit the gear/settings.\n3. Check the box: `Use your own OAuth credentials`\n\t* Enter in clientID and clientSecret\n\t* Close\n4. On the left, find \"Google Play Developer API v2\"\n * Select \"https://www.googleapis.com/auth/androidpublisher\"\n5. Hit Authorize Api's button\n6. Save `Authorization Code` \n * This is your: **googleAccToken**\n7. Hit `Exchange Authorization code for token`\n8. Grab: `Refresh Token`\n * This is your: **googleRefToken**\n\nNow you are able to query for Android subscription status!\n\n## Amazon App Store Reference\n\nhttps://developer.amazon.com/appsandservices/apis/earn/in-app-purchasing/docs/rvs\n\n***\n\n## Windows Signed XML\n\nin-app-purchase module supports the following algorithms:\n\n### Canonicalization and Transformation Algorithms\n\n- Exclusive Canonicalization http://www.w3.org/2001/10/xml-exc-c14n#\n\n- Exclusive Canonicalization with comments http://www.w3.org/2001/10/xml-exc-c14n#WithComments\n\n- Enveloped Signature transform http://www.w3.org/2000/09/xmldsig#enveloped-signature\n\n### Hashing Algorithms\n\n- SHA1 digests http://www.w3.org/2000/09/xmldsig#sha1\n\n- SHA256 digests http://www.w3.org/2001/04/xmlenc#sha256\n\n- SHA512 digests http://www.w3.org/2001/04/xmlenc#sha512\n\n***\n\n## Test\n\n`in-app-purchase` module provides unit tests. In order the make use of the unit tests, you must provide receipts for iOS/Android in files.\n\nTo test the module you may execute the following commands in the root directory of the module:\n\n#### For iOS:\n\n```\nmake test-apple path=/path/to/your/apple/receipt/file\n```\n\n#### For Android:\n\nIn order to test google's in-app-billing, you must provide the public key file in addition to your google receipt file.\n\nNOTE: the receipt file for google must contain javascript object format something similar to:\n\n```\n{\"data\":\"google sent data\",\"signature\":\"signature string\"}\n```\n\n```\nmake test-google path=/path/to/your/google/receipt/file pk=/path/you/the/directory/of/your/google/public/key/\n```\n\n#### For Windows:\n\nIn order to test windows' in-app-purchase, you must provide the signed receipt XML as a file.\n\n```\nmake test-windows path=/path/to/your/windows/receipt/xml\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/voltrue2/in-app-purchase/issues"},"homepage":"https://github.com/voltrue2/in-app-purchase#readme","_id":"in-app-purchase@1.2.0","_shasum":"1583cf6e1bcf6a75dd834ee79b6993da0b1de3fd","_resolved":"https://registry.npmjs.org/in-app-purchase/-/in-app-purchase-1.2.0.tgz","_from":"https://registry.npmjs.org/in-app-purchase/-/in-app-purchase-1.2.0.tgz"}