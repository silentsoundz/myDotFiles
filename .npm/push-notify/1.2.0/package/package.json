{"name":"push-notify","version":"1.2.0","description":"Easily send notifications over multiple protocols.","keywords":["notification","push","apns","apn","mpns","gcm"],"scripts":{"test":"mocha --recursive test/unit","coverage":"istanbul cover _mocha -- --recursive test/unit"},"author":{"name":"BergÃ© Greg","email":"berge.greg@gmail.com"},"licence":"MIT","main":"index.js","repository":{"type":"git","url":"git://github.com/neoziro/push-notify.git"},"bugs":{"url":"https://github.com/neoziro/push-notify/issues","email":"berge.greg@gmail.com"},"engines":{"node":">=0.6.5"},"dependencies":{"apn":"^1.7.6","bluebird":"^3.4.0","lodash":"^4.13.1","mpns":"^2.1.0","node-gcm":"^0.14.3","pipe-event":"^0.1.0","q":"^1.4.1","wns":"^0.5.3"},"devDependencies":{"chai":"^3.5.0","istanbul":"^0.4.3","mocha":"^2.5.3","sinon":"^1.17.4","sinon-chai":"^2.8.0"},"gitHead":"6bc2b5fdb1bdc9649b9ec1964d79ca50187fc8a9","readme":"# push-notify\n[![Build Status](https://travis-ci.org/neoziro/push-notify.svg?branch=master)](https://travis-ci.org/neoziro/push-notify)\n[![Dependency Status](https://david-dm.org/neoziro/push-notify.svg?theme=shields.io)](https://david-dm.org/neoziro/push-notify)\n[![devDependency Status](https://david-dm.org/neoziro/push-notify/dev-status.svg?theme=shields.io)](https://david-dm.org/neoziro/push-notify#info=devDependencies)\n\nEasily send notifications over several protocols.\n\n## Install\n\n```\nnpm install push-notify\n```\n\n## Usage\n\n### Apple Push Notification (APN)\n\n#### Example\n\n```js\n// Create a new APN sender.\nvar apn = notify.apn({\n  key: 'myKey.pem',\n  cert: 'myCert.pem'\n});\n\n// Send a notification.\napn.send({\n  token: 'DEVICE_TOKEN',\n  alert: 'Hello world!'\n});\n```\n\n#### Notification\n\n```\n  {string|string[]} token Device token\n  ...\n```\n\nAdditional fields can be found in [node-apn documentation](https://github.com/argon/node-apn/blob/master/doc/apn.markdown#class-apnnotification).\n\n#### Closing connection\n\nAPN use a socket and keep it connected, so if we want to gracefully stop a process, you will need to close this connection. A close method is avalaible on the APN sender.\n\n```js\napn.close(function () {\n  // the connection is closed\n});\n```\n\n#### Events\n\n##### transmitted\n\nEmmited when a notification was correctly transmitted to Apple servers. You can find more details in [node-apn documentation](https://github.com/argon/node-apn/blob/master/doc/apn.markdown#event-transmitted).\n\n```js\napn.on('transmitted', function (notification, device) {});\n```\n\n##### transmissionError\n\nEmmited when a error occurs during notfication transmission. You can find more details in [node-apn documentation](https://github.com/argon/node-apn/blob/master/doc/apn.markdown#event-transmissionerror).\n\n```js\napn.on('transmissionError', function (errorCode, notification, device) {});\n```\n\n##### error\n\nCalled when an error occurs during the connection to Apple servers. You can find more details in [node-apn documentation](https://github.com/argon/node-apn/blob/master/doc/apn.markdown#event-error).\n\n```js\napn.on('error', function (error) {});\n```\n\n### Google Cloud Messaging (GCM)\n\n#### Example\n\n```js\n// Create a new GCM sender.\nvar gcm = require('push-notify').gcm({\n  apiKey: 'GOOGLE_SERVER_API_KEY',\n  retries: 1\n});\n\n// Send a notification.\ngcm.send({\n  registrationId: 'REGISTRATION_ID',\n  collapseKey: 'COLLAPSE_KEY',\n  delayWhileIdle: true,\n  timeToLive: 3,\n  data: {\n    key1: 'message1',\n    key2: 'message2'\n  }\n});\n```\n\n#### Notification\n\n```\n  {string|string[]} registrationId Device registration id\n  {string} collapseKey Collapse key\n  {boolean} delayWhileIdle If included, indicates that the message should not be sent immediately if the device is idle. The server will wait for the device to become active, and then only the last message for each collapse_key value will be sent. Optional. The default value is false, and must be a JSON boolean.\n  {number} timeToLive How long (in seconds) the message should be kept on GCM\n  {object} data Custom data\n```\n\n#### Events\n\n##### transmitted\n\nEmmited when a notification was correctly transmitted to Google servers.\n\n```js\ngcm.on('transmitted', function (result, message, registrationId) {});\n```\n\n##### transmissionError\n\nEmmited when a error occurs during the transmission of the message.\n\n```js\ngcm.on('transmissionError', function (error, message, registrationId) {});\n```\n\n##### updated\n\nEmmited when a registration id must be updated in the database.\n\n```js\ngcm.on('updated', function (result, registrationId) {});\n```\n\n### Windows Push Notification Service (WNS)\n\n#### Example\n\n```js\n// Create a new WNS sender.\nvar wns = require('push-notify').wns({\n  client_id: 'your Package Security Identifier',\n  client_secret: 'your Client secret'\n});\n\n// Send notification.\nwns.send({\n  channelURI: 'URI to your application notification channel',\n  payload: 'XML containing the notification data',\n  type: 'notification type'\n});\n```\n\n#### Notification\n\n```\n  {string} channelURI URI for the device to send the notification to\n  {string} payload the XML string containing the notif data\n  {string} type notif type. One of: toast, badge, tile, raw\n  {object} options an optional options object passed to wns lib (see wns lib)\n```\n\n#### Events\n\n##### transmitted\n\nEmmited when a notification was correctly transmitted to Microsoft servers.\n\n```js\nwns.on('transmitted', function (result) {});\n```\n\n##### transmissionError\n\nEmmited when a error occurs during the transmission of the message.\n\n```js\nwns.on('transmissionError', function (error) {});\n```\n\n### Microsoft Push Notification Service (MPNS)\n\n#### Example\n\n```js\n// Create a new MPNS sender.\nvar mpns = require('push-notify').mpns();\n\n// Send notification.\nmpns.send({\n  pushUri: 'DEVICE_PUSH_URI',\n  text1: 'Hello world!',\n  text2: 'Is that true?'\n});\n```\n\n#### Notification\n\n```\n  {string|string[]} pushUri Device push uri\n  {string} text1 Text of the toast (bold)\n  {string} text2 Text of the toast (normal)\n  {string} param Optional uri parameters\n```\n\n#### Events\n\n##### transmitted\n\nEmmited when a notification was correctly transmitted to Microsoft servers.\n\n```js\nmpns.on('transmitted', function (result, payload, pushUri) {});\n```\n\n##### transmissionError\n\nEmmited when a error occurs during the transmission of the message.\n\n```js\nmpns.on('transmissionError', function (error, payload, pushUri) {});\n```\n\n## Used modules\n\n* apn: [node-apn](https://github.com/argon/node-apn)\n* gcm: [node-gcm](https://github.com/ToothlessGear/node-gcm)\n* mpns: [node-mpns](https://github.com/jeffwilcox/mpns)\n* wns: [wns](https://github.com/tjanczuk/wns)\n\n## License\n\nMIT\n","readmeFilename":"README.md","homepage":"https://github.com/neoziro/push-notify#readme","_id":"push-notify@1.2.0","_shasum":"61ee69c653211b6f2ebcf6dcaa3a788cf7637cf1","_from":"git://github.com/habitrpg/push-notify.git#6bc2b5fdb1bdc9649b9ec1964d79ca50187fc8a9","_resolved":"git://github.com/habitrpg/push-notify.git#6bc2b5fdb1bdc9649b9ec1964d79ca50187fc8a9"}