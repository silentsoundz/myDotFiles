{"name":"eslint-plugin-html","version":"2.0.1","description":"An ESLint plugin to extract and lint scripts from HTML files.","license":"ISC","repository":{"type":"git","url":"git+https://github.com/BenoitZugmeyer/eslint-plugin-html.git"},"homepage":"https://github.com/BenoitZugmeyer/eslint-plugin-html","bugs":{"url":"https://github.com/BenoitZugmeyer/eslint-plugin-html/issues"},"keywords":["eslint-plugin","eslintplugin","eslint","html"],"main":"src/index.js","dependencies":{"htmlparser2":"^3.8.2"},"devDependencies":{"eslint":"^3.2.2","jest":"^18.1.0"},"scripts":{"test":"jest","lint":"eslint ."},"readme":"eslint-plugin-html\n==================\n\n[![Build Status](https://travis-ci.org/BenoitZugmeyer/eslint-plugin-html.svg?branch=master)](https://travis-ci.org/BenoitZugmeyer/eslint-plugin-html)\n\nThis [`ESLint`](http://eslint.org) plugin extracts and lints scripts from HTML files.\n\nOnly script tags with no type attribute or a type attribute containing a MIME type known to\nrepresent JavaScript such as `text/javascript` or `application/javascript`, or `text/babel` will be\nlinted.\n\n\nUsage\n-----\n\nSimply install via `npm install --save-dev eslint-plugin-html` and add the plugin to your ESLint\nconfiguration. See\n[ESLint documentation](http://eslint.org/docs/user-guide/configuring#configuring-plugins).\n\nExample:\n\n```javascript\n{\n    \"plugins\": [\n        \"html\"\n    ]\n}\n```\n\nNote: by default, when executing the `eslint` command on a directory, only `.js` files will be\nlinted. You will have to specify extra extensions with the `--ext` option. Example: `eslint --ext\n.html,.js src` will lint both `.html` and `.js` files in the `src` directory. See [ESLint\ndocumentation](http://eslint.org/docs/user-guide/command-line-interface#ext).\n\nXML support\n-----------\n\nThis plugin parses HTML and XML markup slightly differently, mainly when considering `CDATA`\nsections:\n* in XML, any data inside a `CDATA` section will be considered as raw text (not XML) and the `CDATA`\n  delimiter will be droped ;\n* in HTML, there is no such thing for `<script>` tags: the `CDATA` delimiter is considered as normal\n  text and thus, part of the script.\n\n\nSettings\n--------\n\n### `html/html-extensions`\n\nBy default, this plugin will only consider files ending with those extensions as HTML: `.erb`,\n`.handlebars`, `.hbs`, `.htm`, `.html`, `.mustache`, `.nunjucks`, `.php`, `.tag`, `.twig`, `.vue`,\n`.we`. You can set your own list of HTML extensions by using this setting. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/html-extensions\": [\".html\", \".we\"],  // consider .html and .we files as HTML\n    }\n}\n```\n\n\n### `html/xml-extensions`\n\nBy default, this plugin will only consider files ending with those extensions as XML: `.xhtml`,\n`.xml`. You can set your own list of XML extensions by using this setting. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/xml-extensions\": [\".html\"],  // consider .html files as XML\n    }\n}\n```\n\n\n### `html/indent`\n\nBy default, the code between `<script>` tags is dedented according to the first non-empty line. The\nsetting `html/indent` allows to ensure that every script tags follow an uniform indentation. Like\nthe `indent` rule, you can pass a number of spaces, or `\"tab\"` to indent with one tab. Prefix this\nvalue with a `+` to be relative to the `<script>` tag indentation. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/indent\": \"0\",   // code should start at the beginning of the line (no initial indentation).\n        \"html/indent\": \"+2\",  // indentation is the <script> indentation plus two spaces.\n        \"html/indent\": \"tab\", // indentation is one tab at the beginning of the line.\n    }\n}\n```\n\n\n### `html/report-bad-indent`\n\nBy default, this plugin won't warn if it encounters a problematic indentation (ex: a line is under\nindented). If you want to make sure the indentation is correct, use the `html/report-bad-indent` in\nconjunction with the `indent` rule. Pass `\"warn\"` or `1` to display warnings, `\"error\"` or `2` to\ndisplay errors. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/report-bad-indent\": \"error\",\n    }\n}\n```\n\n\n### `html/javascript-mime-types`\n\nBy default, the code between `<script>` tags is considered as JavaScript code only if there is no\n`type` attribute or if its value matches the pattern\n`/^(application|text)\\/(x-)?(javascript|babel|ecmascript-6)$/i`. You can customize the types that\nshould be considered as JavaScript by providing one or multiple MIME types. If a MIME type starts\nwith a `/`, it will be considered as a regular expression. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/javascript-mime-types\": [\"text/javascript\", \"text/jsx\"],  // also use script tags with a \"text/jsx\" type attribute\n        \"html/javascript-mime-types\": \"/^text\\\\/(javascript|jsx)$/\",    // same thing\n    }\n}\n```\n","readmeFilename":"README.md","_id":"eslint-plugin-html@2.0.1","_shasum":"3a829510e82522f1e2e44d55d7661a176121fce1","_resolved":"https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-2.0.1.tgz","_from":"https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-2.0.1.tgz"}