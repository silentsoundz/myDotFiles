{"name":"express-basic-auth","version":"1.0.1","description":"Plug & play basic auth middleware for express","main":"index.js","scripts":{"test":"mocha test.js"},"repository":{"type":"git","url":"git+https://github.com/LionC/express-basic-auth.git"},"keywords":["express","middleware","basic","auth","authentication"],"author":{"name":"LionC","email":"me@lionc.de"},"license":"MIT","bugs":{"url":"https://github.com/LionC/express-basic-auth/issues"},"homepage":"https://github.com/LionC/express-basic-auth#readme","dependencies":{"basic-auth":"^1.0.4"},"devDependencies":{"mocha":"^3.2.0","should":"^11.2.0","supertest":"^3.0.0"},"readme":"# express-basic-auth\n\n[![npm version](https://badge.fury.io/js/express-basic-auth.svg)](https://badge.fury.io/js/express-basic-auth)\n[![npm](https://img.shields.io/npm/dm/express-basic-auth.svg)]()\n[![David](https://img.shields.io/david/strongloop/express.svg)]()\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)\n\nSimple plug & play HTTP basic auth middleware for Express.\n\n## How to install\n\nJust run\n\n```shell\nnpm install express-basic-auth\n```\n\nadd the `--save` option to add it to the `dependencies` in your `package.json` as well\n\n## How to use\n\nThe module will export a function, that you can call with an options object to\nget the middleware:\n\n```js\nvar app = require('express')()\nvar basicAuth = require('express-basic-auth')\n\napp.use(basicAuth({\n    users: { 'admin': 'supersecret' }\n}))\n```\n\nThe middleware will now check incoming requests to match the credentials\n`admin:supersecret`.\n\nThe middleware will check incoming requests for a basic auth (`Authorization`)\nheader, parse it and check if the credentials are legit. If there are any\ncredentials, an `auth` property will be added to the request, containing\nan object with `user` and `password` properties, filled with the credentials,\nno matter if they are legit or not.\n\n**If a request is found to not be authorized**, it will respond with HTTP 401\nand a configurable body (default empty).\n\n### Static Users\n\nIf you simply want to check basic auth against one or multiple static credentials,\nyou can pass those credentials in the `users` option:\n\n```js\napp.use(basicAuth({\n    users: {\n        'admin': 'supersecret',\n        'adam': 'password1234',\n        'eve': 'asdfghjkl'\n    }\n}))\n```\n\nThe middleware will check incoming requests to have a basic auth header matching\none of the three passed credentials.\n\n### Custom authorization\n\nAlternatively, you can pass your own `authorizer` function, to check the credentials\nhowever you want. It will be called with a username and password and is expected to\nreturn `true` or `false` to indicate that the credentials were approved or not:\n\n```js\napp.use(basicAuth( { authorizer: myAuthorizer } ))\n\nfunction myAuthorizer(username, password) {\n    return username.startsWith('A') && password.startsWith('secret')\n}\n```\n\nThis will authorize all requests with credentials where the username begins with\n`'A'` and the password begins with `'secret'`. In an actual application you would\nlikely look up some data instead ;-)\n\n### Custom Async Authorization\n\nNote that the `authorizer` function above is expected to be synchronous. This is\nthe default behavior, you can pass `authorizeAsync: true` in the options object to indicate\nthat your authorizer is asynchronous. In this case it will be passed a callback\nas the third parameter, which is expected to be called by standard node convention\nwith an error and a boolean to indicate if the credentials have been approved or not.\nLet's look at the same authorizer again, but this time asynchronous:\n\n```js\napp.use(basicAuth({\n    authorizer: myAsyncAuthorizer,\n    authorizeAsync: true\n}))\n\nfunction myAsyncAuthorizer(username, password, cb) {\n    if(username.startsWith('A') && password.startsWith('secret'))\n        return cb(null, true)\n    else\n        return cb(null, false)\n}\n```\n\n### Unauthorized Response Body\n\nPer default, the response body for unauthorized responses will be empty. It can\nbe configured using the `unauthorizedResponse` option. You can either pass a\nstatic response or a function that gets passed the express request object and is\nexpected to return the response body. If the response body is a string, it will\nbe used as-is, otherwise it will be sent as JSON:\n\n```js\napp.use(basicAuth({\n    users: { 'Foo': 'bar' },\n    unauthorizedResponse: getUnauthorizedResponse\n}))\n\nfunction getUnauthorizedResponse(req) {\n    return req.auth ?\n        ('Credentials ' + req.auth.user + ':' + req.auth.password + ' rejected') :\n        'No credentials provided'\n}\n```\n\n### Challenge\n\nPer default the middleware will not add a `WWW-Authenticate` challenge header to\nresponses of unauthorized requests. You can enable that by adding `challenge: true`\nto the options object. This will cause most browsers to show a popup to enter\ncredentials on unauthorized responses. You can set the realm (the realm\nidentifies the system to authenticate against and can be used by clients to save\ncredentials) of the challenge by passing a static string or a function that gets\npassed the request object and is expected to return the challenge:\n\n```js\napp.use(basicAuth({\n    users: { 'someuser': 'somepassword' },\n    challenge: true,\n    realm: 'Imb4T3st4pp'\n}))\n```\n\n## Try it\n\nThe repository contains an `example.js` that you can run to play around and try\nthe middleware. To use it just put it somewhere (or leave it where it is), run\n\n```shell\nnpm install express express-basic-auth\nnode example.js\n```\n\nThis will start a small express server listening at port 8080. Just look at the file,\ntry out the requests and play around with the options.\n\n## Tests\n\nThe cases in the `example.js` are also used for automated testing. So if you want  \nto contribute or just make sure that the package still works, simply run:\n\n```shell\nnpm test\n```\n","readmeFilename":"README.md","_id":"express-basic-auth@1.0.1","_shasum":"72b97850f1eed625aecf668e2bc58edccaf08a52","_resolved":"https://registry.npmjs.org/express-basic-auth/-/express-basic-auth-1.0.1.tgz","_from":"https://registry.npmjs.org/express-basic-auth/-/express-basic-auth-1.0.1.tgz"}