{"name":"paypal-ipn","version":"3.0.0","description":"Package for verifying Paypal IPN messages","keywords":["paypal","ipn","payment"],"contributors":[{"name":"Chun-hao Hu","email":"hu.chunhao@gmail.com","url":"http://blog.huchunhao.com"}],"bugs":{"url":"https://github.com/andzdroid/paypal-ipn/issues"},"repository":{"type":"git","url":"git+ssh://git@github.com/andzdroid/paypal-ipn.git"},"dependencies":{},"main":"index","scripts":{"test":"nodeunit tests"},"engines":["node"],"devDependencies":{"nodeunit":"^0.9.0"},"readme":"# PayPal IPN Verification\n\nA simple NodeJS package for verifying PayPal IPN messages.\n\n## Installation\n```sh\n$ npm install paypal-ipn\n```\n\n## Usage\nThere is only one function, `verify`, which is used to verify any IPN messages you receive:\n\n```javascript\nipn.verify(ipn_params, [settings], callback);\n```\n\n`ipn_params` is the dictionary of POST values sent to your IPN script by PayPal. Don't modify the dict in any way, just pass it directly to `ipn.verify` to check if the IPN message is valid.\n\n\nExample code:\n\n```javascript\n// Must respond to PayPal IPN request with an empty 200 first\n// If using Express, uncomment the following:\n// res.send(200);\n\nvar ipn = require('paypal-ipn');\n\nipn.verify(params, function callback(err, msg) {\n  if (err) {\n    console.error(err);\n  } else {\n    // Do stuff with original params here\n\n    if (params.payment_status == 'Completed') {\n      // Payment has been confirmed as completed\n    }\n  }\n});\n\n//You can also pass a settings object to the verify function:\nipn.verify(params, {'allow_sandbox': true}, function callback(err, mes) {\n  //The library will attempt to verify test payments instead of blocking them\n});\n```\n\nNote that all the package does is confirm that the IPN message is valid. After this, you will still need to make some more checks:\n\n* Confirm that the `payment_status` is `Completed`.\n\n* Use the transaction ID to verify that the transaction has not already been processed, which prevents duplicate transactions from being processed.\n\n* Validate that the receiver's email address is registered to you.\n\n* Verify that the price, item description, and so on, match the transaction on your website.\n\nYou can find more information on the [PayPal documentation for IPN](https://cms.paypal.com/cgi-bin/marketingweb?cmd=_render-content&content_ID=developer/e_howto_admin_IPNIntro).\n\n### Settings\n\nOptional settings:\n\n```\n{\n  'allow_sandbox': false\n}\n```\n\n#### allow_sandbox\n\nIf this is true, the library will attempt to verify sandbox requests at PayPal's sandbox URL.\n\nIf this is false, the library will callback with an error without checking PayPal. (This is the default value.)\n\n**You should set this to false on production servers.**\n\n### The callback\nThe callback has two parameters, `err` and `msg`.\n\nIf `err` is null then the IPN is valid and you can continue processing the payment. `msg` is always `VERIFIED` then.\n\nIn case IPN was invalid or the http request failed `err` holds the Error object.\n\n### Express\n`paypal-ipn` works fine with [Express](http://expressjs.com/) or any other web framework.\n\nAll you need to do is pass in the request parameters to `ipn.verify`.\n\nIn Express, the request parameters are in `req.body`:\n\n```javascript\nipn.verify(req.body, callback_function);\n```\n","readmeFilename":"README.md","homepage":"https://github.com/andzdroid/paypal-ipn#readme","_id":"paypal-ipn@3.0.0","_shasum":"749a8af0f91487ca7bdb190cd06553a1392ab08a","_resolved":"https://registry.npmjs.org/paypal-ipn/-/paypal-ipn-3.0.0.tgz","_from":"https://registry.npmjs.org/paypal-ipn/-/paypal-ipn-3.0.0.tgz"}