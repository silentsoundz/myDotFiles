{"name":"inject-loader","version":"3.0.0-beta4","description":"A Webpack loader for injecting code into modules via their dependancies","main":"dist/index.js","scripts":{"build":"babel -d dist src","test":"flow && jest && ./script/integration_test","prepublish":"npm run build"},"files":["*.md","dist"],"author":{"name":"Justin Morris","email":"desk@pixelbloom.com","url":"http://pixelbloom.com"},"repository":{"type":"git","url":"git+ssh://git@github.com/plasticine/inject-loader.git"},"license":"MIT","dependencies":{"loader-utils":"^0.2.3"},"devDependencies":{"babel-cli":"^6.14.0","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-preset-es2015":"^6.14.0","flow-bin":"^0.36.0","jest":"^17.0.3","karma-phantomjs-launcher":"^1.0.2"},"peerDependencies":{"webpack":"^1 || ^2.2.0-rc"},"jest":{"bail":true,"notify":true,"testPathIgnorePatterns":["/node_modules/","/example/"]},"keywords":["webpack","testing","loader","webpack-loader","inject","mock","mocking"],"readme":"# inject-loader\n\n[![build status](https://img.shields.io/travis/plasticine/inject-loader/master.svg?style=flat-square)](https://travis-ci.org/plasticine/inject-loader) [![Gemnasium](https://img.shields.io/gemnasium/plasticine/inject-loader.svg?style=flat-square)](https://gemnasium.com/plasticine/inject-loader) [![npm version](https://img.shields.io/npm/v/inject-loader.svg?style=flat-square)](https://www.npmjs.com/package/inject-loader) [![npm downloads](https://img.shields.io/npm/dm/inject-loader.svg?style=flat-square)](https://www.npmjs.com/package/inject-loader)\n\n**ðŸ’‰ðŸ‘¾ A Webpack loader for injecting code into modules via their dependencies**\n\nThis is particularly useful for writing tests where mocking things inside your module-under-test is sometimes necessary before execution.\n\n`inject-loader` was inspired by, and builds upon ideas introduced in [jauco/webpack-injectable](https://github.com/jauco/webpack-injectable).\n\n### Usage\n\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\n\nUse the inject loader by adding `inject!` when you use `require`, this will return a function that can be passed things to inject.\n\nBy default all `require` statements in an injected module will be altered to be replaced with an injector, though if a replacement it not specified the default will be used.\n\n### Examples\n\nGiven some code in a module like this:\n\n```javascript\n// MyStore.js\n\nvar Dispatcher = require('lib/dispatcher');\nvar EventEmitter = require('events').EventEmitter;\nvar handleAction = require('lib/handle_action');\n\nDispatcher.register(handleAction, 'MyStore');\n```\n\nYou can manipulate itâ€™s dependencies when you come to write tests as follows:\n\n```javascript\n// If no flags are provided when using the loader then\n// all require statements will be wrapped in an injector\nMyModuleInjector = require('inject!MyStore')\nMyModule = MyModuleInjector({\n  'lib/dispatcher': DispatcherMock,\n  'events': EventsMock,\n  'lib/handle_action': HandleActionMock\n})\n```\n\nThere are a few examples of complete test setups for both Webpack 1 & 2 in the [`example`](./example) folder.\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/plasticine/inject-loader/issues"},"homepage":"https://github.com/plasticine/inject-loader#readme","_id":"inject-loader@3.0.0-beta4","_shasum":"772a5010f0db7dc50b35e66e29fd22ac056be46b","_resolved":"https://registry.npmjs.org/inject-loader/-/inject-loader-3.0.0-beta4.tgz","_from":"https://registry.npmjs.org/inject-loader/-/inject-loader-3.0.0-beta4.tgz"}